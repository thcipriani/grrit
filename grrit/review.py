#!/usr/bin/env python3
#-*- coding: utf-8 -*-
"""
gerritcommentor.review
~~~~~~~~~~~~~~~~

Add structured comments for gerrit
"""
import json


class FileCommentRange(object):
    """
    Simple class to hold line ranges for comments
    """
    def __init__(self, start_line, end_line=None):
        self.start_line = start_line
        self.end_line = end_line

    def json(self):
        return {
            'start_line': self.start_line,
            'end_line': self.end_line
        }

class FileComment(object):
    """
    Comment on individual lines, or a range of lines
    """
    def __init__(
            self, file, message=None, line_number=None, end_line=None):
        self.file = file
        self.message = message
        self.line_number = line_number
        self.range = None
        self.end_line = end_line

    def line(self, number):
        """
        Line number of file comment
        """
        self.line_number = number
        return self

    def start(self, number):
        """
        Construct FileCommentRange
        """
        self.line(number)
        return self

    def end(self, number):
        self.end_line = number
        return self

    def say(self, message):
        self.message = message
        return self

    def json(self):
        if self.end_line:
            self.range = FileCommentRange(self.line_number, self.end_line)
            self.line_number = None

        ret = {}
        if self.range:
            ret['range'] = self.range.json()
        elif self.line_number:
            ret['line'] = self.line_number

        ret['message'] = self.message
        return ret

class Comment(object):
    """
    ReviewInput comment for posting to gerrit
    """
    def __init__(self, message=None):
        self.message = message
        self._tag = None
        self._comments = {}

    @property
    def tag(self):
        return self._tag

    @tag.setter
    def tag(self, tag):
        if not tag.startswith('autogenerated:'):
            tag = 'autogenerated:{}'.format(tag)

        self._tag = tag

    def add(self, filecomment):
        if isinstance(filecomment, FileComment):
            self.add_comment(filecomment)
        if isinstance(filecomment, list):
            self.add_comments(filecomment)

        return self

    def add_comment(self, comment):
        """
        Add a comment to a file of a particular line

        :filename: string - name of file
        :comment: FileComment - an object with a .json() method at least
        """
        if not self._comments.get(comment.file):
            self._comments[comment.file] = []

        self._comments[comment.file].append(comment)

    def add_comments(self, comments):
        """
        Convenient method to add a bunch of comments at once
        """
        for comment in comments:
            self.add_comment(comment)

    def _json_comments(self):
        ret = {}
        for filename, comments in self._comments.items():
            comments_json = []
            for comment in comments:
                comments_json.append(comment.json())
            ret[filename] = comments_json

        return ret

    def json(self):
        ret = {}
        if self.message:
            ret['message'] = self.message
        if self._comments:
            ret['comments'] = self._json_comments()
        if self._tag:
            ret['tag'] = self._tag
        return ret

    def say(self, message):
        self.message = message
        return self
