#!/usr/bin/env python3
#-*- coding: utf-8 -*-
"""
gerritcommentor.review
~~~~~~~~~~~~~~~~

Add structured comments for gerrit
"""
import json

class CommentRange(object):
    def __init__(self, start_line, end_line):
        self.start_line = start_line
        self.end_line = end_line

class CommentInput(object):
    def __init__(self, message, start_line, end_line=None):
        self.message = message
        self.line = None
        self.range = None

        if not end_line:
            self.line = start_line
        else:
            self.range = CommentRange(start_line, end_line)

    def json(self):
        ret = {}
        if self.range:
            ret['range'] = self.range.__dict__
        elif self.line:
            ret['line'] = self.line

        ret['message'] = self.message
        return ret

class ReviewInput(object):
    def __init__(self, message):
        self.message = message
        self._tag = None
        self._comments = {}

    @property
    def tag(self):
        return self._tag

    @tag.setter
    def tag(self, tag):
        if not tag.startswith('autogenerated:'):
            tag = 'autogenerated:{}'.format(tag)

        self._tag = tag

    def add_comment(self, filename, comment, start_line=None, end_line=None):
        if not self._comments.get(filename):
            self._comments[filename] = []

        comment = CommentInput(comment, start_line, end_line)

        self._comments[filename].append(comment)

    def _json_comments(self):
        ret = {}
        for filename, comments in self._comments.items():
            comments_json = []
            for comment in comments:
                comments_json.append(comment.json())
            ret[filename] = comments_json

        return ret

    def json(self):
        ret = {}
        ret['message'] = self.message
        if self._comments:
            ret['comments'] = self._json_comments()
        if self._tag:
            ret['tag'] = self._tag
        return ret
